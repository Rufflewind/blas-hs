#{ # -*- haskell -*-
require "./tools/common"
stem = strip_ext FILE
name = File.basename stem
safety = ARGV[2]
["Safe", "Unsafe"].each do |safety|
  fn = "#{stem}/#{safety}.chs"
  load(fn + ".tmp")
  write_file fn, <<END
#{AUTOGEN}
{-# LANGUAGE ForeignFunctionInterface #-}
{-|

Stability: stable

Foreign function interface to Blas.  These functions use #{safety.downcase}
foreign calls.  Refer to the GHC documentation for more information regarding
appropriate use of safe and unsafe foreign calls.

-}
module Blas.#{name}.#{safety} (#{$exports}) where
import Prelude hiding (Either(Left, Right))
import Data.Complex (Complex)
import Foreign (Ptr, castPtr)
import Foreign.C.Types
import Foreign.Storable.Complex ()
import Blas.#{name}.Types
import BlasCTypes
import FFI

#include #{CBLAS_HEADER_FILENAME}

#{$contents}
END
end }
